<?page
wintitle=>a distributed memory object caching system
body<=

<?h1 What is <?memd?>? h1?>
<p><?memd?> is a high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.</p>
<p><a href="http://www.danga.com/">Danga Interactive</a> developed <?memd?> to enhance the speed of <a href="http://www.livejournal.com/">LiveJournal.com</a>, a site which was already doing 20 million+ dynamic page views per day for 1 million users with a bunch of webservers and a bunch of database servers.  <?memd?> dropped the database load to almost nothing, yielding faster page load times for users, better resource utilization, and faster access to the databases on a memcache miss.</p>

<?h1 How it Works h1?>
<p>First, you start up the <b>memcached</b> daemon on as many spare machines as you have.  The daemon has no configuration file, just a few command line options, only 3 or 4 of which you'll likely use:
<pre class='example'># ./memcached -d -m 2048 -l 10.0.0.40 -p 11211</pre>
<p>This starts <tt class='mem'>memcached</tt> up as a daemon, using 2GB of memory, and listening on IP 10.0.0.40, port 11211.  As a 32-bit process can only address 4GB of virtual memory (actually, 3-3.5 GB, depending on the kernel config), if you have a 32-bit server with 4-64GB of memory using PAE you can just run multiple processes on the machine, each using 2 or 3GB of memory.</p>

<?h1 Porting the Application h1?>
<p>Now, in your application, wherever you go to do a database query, first check the memcache.  If the memcache returns an undefined object, then go to the database, get what you're looking for, and put it in the memcache:</p>
<pre class='example'>
<div class='exampletitle'>Perl Example (see <a href="apis.html">APIs page</a>)</div>
sub get_foo_object {
   my $foo_id = int(shift);
   my $obj = MemCache::get("foo:$foo_id");
   return $obj if $obj;

   $obj = $::db->selectrow_hashref("SELECT .... FROM foo f, bar b ".
                                   "WHERE ... AND f.fooid=$foo_id");
   MemCache::set("foo:$foo_id", $obj);
   return $obj;
}</pre>

<p>(If your internal API was already clean enough, you should only have to do this in a few spots.  Start with the queries that kill your database the most, then move to doing as much as possible.)</p>

<p>You'll notice the data structure the server provides is just a dictionary.  You assign values to keys, and you request values from keys.</p>

<p>Now, what actually happens is that the API hashes your key to a unique server.  (You define all the available servers and their weightings when initializing the API)  Alternatively, the APIs also let you provide your own hash value.  A good hash value for user-related data is the user's ID number.  Then, the API maps that hash value onto a server (modulus number of server buckets, one bucket for each server IP/port, but some can be weighted heigher if they have more memory available).</p>

<p>If a host goes down, the API re-maps that dead host's requests onto the servers that are available.</p>

<?h1 Shouldn't the DB do this?  What about MySQL 4.x query caching? h1?>
<p>MySQL query caching kinda sucks, for a number of reasons:</p>
<ul class='spaced'>
<li>On 32-bit architectures, the entire server is limited to a 4 GB virtual address space.  <tt class='mem'>memcached</tt> lets you run as many processes as you want, so you have no limit on memory cache size.</li>
<li>MySQL's query cache destroys the entire cache for a given table whenever that table is changed.  On a high-traffic site with updates happening many times per second, this makes the the cache practically worthless.</li>
<li>MySQL has a query cache, not an object cache.  If your objects require extra expensive construction after the data retrieval step, MySQL's query cache can't help you there.</li>

</ul>
<p>If the data you need to cache is small and you do infrequent updates, MySQL's query caching should work for you.  If not, use <tt class='mem'>memcached</tt>.</p>


<?h1 Is memcached fast? h1?>
<p>Very fast.  It uses <a
href="http://www.monkey.org/~provos/libevent/">libevent</a> to scale
to any number of open connections</a> (using <a
href="http://www.xmailserver.org/linux-patches/nio-improve.html">epoll</a>
on Linux), uses non-blocking network I/O, refcounts internal objects
(so objects can be in multiple states to multiple clients), uses <a
href="http://judy.sf.net">Judy</a> for fast mapping of string keys to
pointers, and uses its own slab allocator so virtual memory never gets
externally fragmented and allocations are guaranteed O(1).</p>


<?h1 What about race conditions? h1?>
<p>You might wonder: <i>"What if the <tt>get_foo()</tt> function adds a stale version of the Foo object to the cache right as/after the user updates their Foo object via update_foo()?"</i></p>
<p>While the server and API only have one way to get data from the cache, there exists 3 ways to put data in:</p>
<ul class='spaced'>
<li><b>set</b> -- unconditionally sets a given key with a given value (<tt>update_foo()</tt> should use this)</li>
<li><b>add</b> -- adds to the cache, only if it doesn't already exist (<tt>get_foo()</tt> should use this)</li>
<li><b>replace</b> -- sets in the cache only if the key already exists (not as useful, only for completeness)</li>
</ul>
Additionally, all three support an expiration time.

<=body
page?>
